package project.katacka.dominion;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import java.util.stream.Stream;

import static org.junit.Assert.*;

import project.katacka.dominion.gamestate.DominionCardState;
import project.katacka.dominion.gamestate.DominionDeckState;
import project.katacka.dominion.gamestate.DominionGameState;
import project.katacka.dominion.gamestate.DominionShopPileState;

public class CardStateTest {

    private DominionGameState state;

    @BeforeClass
    public static void setup(){
        GameStateGenerator.setupCards();
    }

    @Before
    public void makeState(){
        state = GameStateGenerator.getNewState(4);
    }

    //Hayden
    @Test
    public void cardStateConstructor(){

    }

    //RYAN
    //SEPARATE CLASS, test copy constructor

    //RYAN
    //TODO: Remove, private method
    @Test
    public void testGetMethod(){

    }

    //RYAN
    @Test
    public void testCardAction(){
        /*
         * External citation
         * Date: 11/25/18
         * Problem: Wanted to use streams, didn't know function names
         * Resource:
         *  https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html
         * Solution: Found function names
         */

        assertEquals("All normal cards can be played.", 0, Stream.concat(state.getBaseCards().stream(), state.getShopCards().stream())
                                                    .map(DominionShopPileState::getCard) //Converts piles to cards
                                                    .filter(card -> !card.cardAction(state)) //Gets cards whose actions fail
                                                    .map(DominionCardState::getTitle) //Get failing cards names (for debugging)
                                                    .count());

        assertTrue("Blank card can be played.", DominionCardState.BLANK_CARD.cardAction(state));
    }

    //HAYDEN
    @Test
    public void testMoatAction(){

    }

    //HAYDEN
    @Test
    public void testMerchantAction(){
    }

    //RYAN
    @Test
    public void testCouncilRoom(){
        int currPlayer = state.getCurrentTurn();
        int otherPlayer = (currPlayer + 1) % 4;

        DominionDeckState currDeck = state.getDominionPlayer(currPlayer).getDeck();
        DominionDeckState otherDeck = state.getDominionPlayer(otherPlayer).getDeck();

        //Test initial state
        assertEquals("Initial hand", 5, currDeck.getHandSize());
        assertEquals("Initial other hand", 5, otherDeck.getHandSize());
        assertEquals("1 buy", 1, state.getBuys());

        //Perform action
        DominionCardState councilRoom = state.getShopCards().get(8).getCard();
        assertTrue("Action succeeds", councilRoom.councilRoomAction(state));

        //Test new state
        assertEquals("Drawn 4", 9, currDeck.getHandSize());
        assertEquals("Drawn 1", 6, otherDeck.getHandSize());
        assertEquals("2 buys", 2, state.getBuys());
    }

    //RYAN AND HAYDEN
    //DONE??
    @Test
    public void testMoneylenderAction(){

    }

    //RYAN
    @Test
    public void testSilverAction(){
        DominionCardState silver, merchant;
        silver = state.getBaseCards().get(2).getCard();
        merchant = state.getShopCards().get(3).getCard();

        //Test we got the right cards
        assertEquals("Got silver.", "Silver", silver.getTitle());
        assertEquals("Got merchant.", "Merchant", merchant.getTitle());

        //Test initial state
        assertEquals("No starting treasure", 0, state.getTreasure());

        //Test silver without a merchant play
        silver.cardAction(state);
        assertEquals("Got 2 treasure", 2, state.getTreasure());

        //Reset turn, so that next silver is first on turn
        state.endTurn(state.getCurrentTurn());

        //Test silver adds treasure for every merchant played.
        merchant.cardAction(state);
        merchant.cardAction(state);
        silver.cardAction(state);
        assertEquals("Merchant bonus", 4, state.getTreasure());

        //Test additional merchants do not grant extra treasure
        merchant.cardAction(state);
        assertEquals("Merchant doesn't grant bonus", 4, state.getTreasure());

        //Test additional silver do not grant extra treasure
        silver.cardAction(state);
        assertEquals("Silver doesn't grant bonus", 6, state.getTreasure());
    }

    //HAYDEN??
    @Test
    public void testBaseAction(){

    }

    /*
    Shouldn't be necessary, they are autogenerated and short.
    //Hayden
    @Test
    public void testEquals(){

    }


    //RYAN
    @Test
    public void testHashCode(){

    }

    */

}
