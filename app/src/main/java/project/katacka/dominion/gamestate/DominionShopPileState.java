package project.katacka.dominion.gamestate;

import java.io.Serializable;
import java.util.Locale;
import java.util.Objects;

/**
 * A data class intended to represent a pile of cards in the shop.
 * Tracks card type and amount.
 *
 * @author Ryan Regier, Julian Donovan, Hayden Liao, Ashika Mulagada
 */
public class DominionShopPileState implements Serializable{
    private final DominionCardState card;
    private int amount;
    private final DominionCardPlace place;

    /**
     * Constructor.
     *
     * If negative number given for {@code amount}, sets {@code amount} to 0.
     *
     * @param card The card the pile represents
     * @param amount The positive number of cards in the pile
     */
    public DominionShopPileState(DominionCardState card, int amount, DominionCardPlace place){
        this.card = card;
        this.amount = Math.max(amount, 0);
        this.place = place;
    }

    /**
     * Copy constructor
     * @param shopPileState The state to copy
     */
    public DominionShopPileState(DominionShopPileState shopPileState){
        this.card = shopPileState.card;
        this.amount = shopPileState.amount;
        this.place = shopPileState.place;
    }

    public DominionCardState getCard() {
        return card;
    }

    public DominionCardPlace getPlace() {
        return place;
    }

    public int getAmount(){
        return amount;
    }

    /**
     * Sets amount, but raises it to 0 if negative number supplied
     * @param amount Amount of cards left in the pile
     */
    public int setAmount(int amount){
        return this.amount = Math.max(amount, 0);
    }

    /**
     * Remove one from the amount of cards in the pile, if the pile is not empty
     */
    public int removeCard(){
        if (amount > 0) amount--;
        return amount;
    }

    /**
     * Removes set amount, but raises it to 0 if it drops below
     * @param amount Amount of cards to remove from the pile
     */
    public int removeAmount(int amount){
        this.amount -= amount;
        return this.amount = Math.max(this.amount, 0);
    }

    /**
     * Determine if there are cards left in the pile
     * @return If there is at least one card in the pile
     */
    public boolean isEmpty(){
        return amount <= 0;
    }

    public int getAddedActions() {
        return card.getAddedActions();
    }

    public int getAddedTreasure() {
        return card.getAddedTreasure();
    }

    public int getAddedDraw() {
        return card.getAddedDraw();
    }

    public int getCost() {
        return card.getCost();
    }

    public int getSimpleVictoryPoints() {
        return card.getSimpleVictoryPoints();
    }

    @Override
    public String toString(){
        return String.format(Locale.US, "\nCard pile. Card: %s, Amount: %d", card.getTitle(), amount);
    }

    //Autogenerated methods


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        DominionShopPileState that = (DominionShopPileState) o;
        return amount == that.amount &&
                place == that.place &&
                Objects.equals(card, that.card);
    }

    @Override
    public int hashCode() {

        return Objects.hash(card, amount, place);
    }
}
